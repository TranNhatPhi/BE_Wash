// services/vehicleService.js
const Vehicle = require("../models/vehicle");
const Customer = require("../models/customer");
const { Op } = require("sequelize");

const VehicleService = {
    // üü¢ Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa bi·ªÉn s·ªë xe trong c∆° s·ªü d·ªØ li·ªáu
    async checkVehicleExistence(licensePlate) {
        try {
            const vehicle = await Vehicle.findOne({
                where: { license_plate: licensePlate },
                include: [
                    {
                        model: Customer,
                        attributes: ["id", "name", "email", "phone"]
                    }
                ]
            });

            return vehicle;  // Tr·∫£ v·ªÅ xe n·∫øu c√≥, ho·∫∑c null n·∫øu kh√¥ng c√≥
        } catch (error) {
            console.error("‚ùå L·ªói khi ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa bi·ªÉn s·ªë xe:", error);
            throw new Error("Kh√¥ng th·ªÉ ki·ªÉm tra bi·ªÉn s·ªë xe");
        }
    },

    // üü¢ L·∫•y t·∫•t c·∫£ ph∆∞∆°ng ti·ªán (s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc)
    async getAllVehicles() {
        try {
            const vehicles = await Vehicle.findAll({
                order: [["createdAt", "DESC"]],
                include: [
                    {
                        model: Customer,
                        attributes: ["id", "name", "email", "phone"]
                    }
                ]
            });
            return vehicles;
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch xe:", error);
            throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch xe");
        }
    },

    // üü¢ L·∫•y ph∆∞∆°ng ti·ªán v·ªõi ph√¢n trang
    async getVehiclesWithPagination(page = 1, limit = 10) {
        try {
            const offset = (page - 1) * limit;
            const { count, rows } = await Vehicle.findAndCountAll({
                offset,
                limit,
                order: [["id", "DESC"]],
                include: [
                    {
                        model: Customer,
                        attributes: ["id", "name", "email", "phone"]
                    }
                ]
            });

            return {
                vehicles: rows,
                total: count,
                page,
                limit,
            };
        } catch (error) {
            console.error("‚ùå L·ªói khi ph√¢n trang xe:", error);
            throw new Error("Kh√¥ng th·ªÉ ph√¢n trang danh s√°ch xe");
        }
    },

    // üü¢ L·∫•y xe theo ID
    async getVehicleById(id) {
        try {
            return await Vehicle.findByPk(id, {
                include: [
                    {
                        model: Customer,
                        attributes: ["id", "name", "email", "phone"]
                    }
                ]
            });
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y xe theo ID:", error);
            throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin xe");
        }
    },

    // üü¢ L·∫•y danh s√°ch xe theo customer_id
    async getVehiclesByCustomerId(customerId) {
        try {
            return await Vehicle.findAll({
                where: { customer_id: customerId },
                order: [["createdAt", "DESC"]]
            });
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y xe theo kh√°ch h√†ng:", error);
            throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch xe theo kh√°ch h√†ng");
        }
    },

    // üü¢ Th√™m m·ªõi xe
    async createVehicle(data) {
        try {
            // validate data ·ªü ƒë√¢y n·∫øu c·∫ßn!
            return await Vehicle.create(data);
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o xe:", error);
            throw new Error("Kh√¥ng th·ªÉ t·∫°o m·ªõi xe");
        }
    },

    // üü¢ C·∫≠p nh·∫≠t xe
    async updateVehicle(id, data) {
        try {
            const vehicle = await Vehicle.findByPk(id);
            if (!vehicle) return null;
            await vehicle.update(data);
            return vehicle;
        } catch (error) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t xe:", error);
            throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t xe");
        }
    },

    // üü¢ X√≥a xe
    async deleteVehicle(id) {
        try {
            const vehicle = await Vehicle.findByPk(id);
            if (!vehicle) return null;
            await vehicle.destroy();
            return true;
        } catch (error) {
            console.error("‚ùå L·ªói khi x√≥a xe:", error);
            throw new Error("Kh√¥ng th·ªÉ x√≥a xe");
        }
    },

    // üü¢ Ki·ªÉm tra d·ªØ li·ªáu xe (simple version)
    validateVehicleData(data) {
        if (!data.customer_id) throw new Error("Thi·∫øu customer_id");
        if (!data.license_plate || data.license_plate.length < 5)
            throw new Error("Bi·ªÉn s·ªë xe kh√¥ng h·ª£p l·ªá");
        // ... th√™m validate kh√°c n·∫øu c·∫ßn
    }
};

module.exports = VehicleService;
