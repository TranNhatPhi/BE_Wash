// controllers/vehicleController.js
const VehicleService = require("../services/vehicleService");
const response = require("../utils/responseHelper");

const VehicleController = {
    // üü¢ Ki·ªÉm tra bi·ªÉn s·ªë xe
    async checkVehicleExistence(req, res) {
        const { rego } = req.query;  // L·∫•y bi·ªÉn s·ªë t·ª´ query parameter

        try {
            const vehicle = await VehicleService.checkVehicleExistence(rego);

            if (vehicle) {
                // N·∫øu t√¨m th·∫•y bi·ªÉn s·ªë xe, tr·∫£ v·ªÅ th√¥ng tin kh√°ch h√†ng v√† xe
                return response.successResponse(res, "Bi·ªÉn s·ªë xe ƒë√£ t·ªìn t·∫°i!", {
                    found: true,
                    customer: {
                        name: vehicle.Customer.name,
                        phone: vehicle.Customer.phone,
                        vehicle: vehicle.license_plate
                    }
                });
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ th√¥ng b√°o bi·ªÉn s·ªë xe kh√¥ng t·ªìn t·∫°i
            return response.successResponse(res, "Bi·ªÉn s·ªë xe kh√¥ng t·ªìn t·∫°i!", {
                found: false
            });
        } catch (error) {
            return response.serverErrorResponse(res, error.message);
        }
    },
    // L·∫•y t·∫•t c·∫£ xe
    async getAll(req, res) {
        try {
            const vehicles = await VehicleService.getAllVehicles();
            return response.successResponse(res, "L·∫•y danh s√°ch xe th√†nh c√¥ng!", vehicles);
        } catch (err) {
            return response.serverErrorResponse(res, err.message);
        }
    },

    // Ph√¢n trang xe
    async getWithPagination(req, res) {
        try {
            const page = parseInt(req.query.page) || 1;
            const limit = parseInt(req.query.limit) || 10;

            const result = await VehicleService.getVehiclesWithPagination(page, limit);

            return response.successResponse(res, "L·∫•y danh s√°ch xe th√†nh c√¥ng!", result);
        } catch (err) {
            return response.serverErrorResponse(res, err.message);
        }
    },


    // L·∫•y xe theo ID
    async getById(req, res) {
        try {
            const { id } = req.params;
            const vehicle = await VehicleService.getVehicleById(id);
            if (!vehicle) {
                return response.notFoundResponse(res, "Kh√¥ng t√¨m th·∫•y xe!");
            }
            return response.successResponse(res, "L·∫•y xe th√†nh c√¥ng!", vehicle);
        } catch (err) {
            return response.serverErrorResponse(res, err.message);
        }
    },

    // T·∫°o m·ªõi xe
    async create(req, res) {
        try {
            const data = req.body;
            VehicleService.validateVehicleData(data);
            const newVehicle = await VehicleService.createVehicle(data);
            return response.createdResponse(res, "T·∫°o xe m·ªõi th√†nh c√¥ng!", newVehicle);
        } catch (err) {
            // N·∫øu l·ªói do validate, tr·∫£ v·ªÅ 400
            return response.badRequestResponse(res, err.message);
        }
    },

    // C·∫≠p nh·∫≠t xe
    async update(req, res) {
        try {
            const { id } = req.params;
            const data = req.body;
            const updatedVehicle = await VehicleService.updateVehicle(id, data);
            if (!updatedVehicle) {
                return response.notFoundResponse(res, "Kh√¥ng t√¨m th·∫•y xe ƒë·ªÉ c·∫≠p nh·∫≠t!");
            }
            return response.successResponse(res, "C·∫≠p nh·∫≠t xe th√†nh c√¥ng!", updatedVehicle);
        } catch (err) {
            return response.serverErrorResponse(res, err.message);
        }
    },

    // Xo√° xe
    async delete(req, res) {
        try {
            const { id } = req.params;
            const deleted = await VehicleService.deleteVehicle(id);
            if (!deleted) {
                return response.notFoundResponse(res, "Kh√¥ng t√¨m th·∫•y xe ƒë·ªÉ xo√°!");
            }
            return response.noContentResponse(res); // 204 xo√° th√†nh c√¥ng kh√¥ng c√≥ n·ªôi dung tr·∫£ v·ªÅ
        } catch (err) {
            return response.serverErrorResponse(res, err.message);
        }
    },
};

module.exports = VehicleController;
